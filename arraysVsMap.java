import java.util.ArrayList;
import java.util.HashMap;

// This program generates random IDs and puts them in a placeholder list,
// 	then stores each ID from the list into an arraylist & hashmap while generating a pass for each ID.
// ID/PASS for ArrayLists are stored in a User object
// Speed for each process is evaluated

public class arraysVsMap {

	// initializing values and placeholders
	public static int howMany = 100000;		// number of users to add
	public static int searchNum = 50000;	// number of users to search
	public static int remNum = 10000;	// number of users to remove
	static String newID = "";
	static int newPass = 0;
	static String placeList[] = new String[howMany];		// placeholder list for IDs

	static ArrayList<User> testList = new ArrayList<>();		// to hold id & pass
	static HashMap<String, Integer> testMap = new HashMap<>();		// to hold id & pass
	static newRandom rand = new newRandom();

	// timer longs
	public static long start;
	public static long end;


	public static void main (String[] args) {
		generateIP(); 		// generates placeholder list for IDs

		// ADD
		System.out.println("ADD: ");
		storeList(testList);		// adds id/pass to arraylist
		storeMap(testMap);		// adds id/pass to hashmap



		// SEARCH by ID
		System.out.println("SEARCH: ");
		searchList(testList);		// searches users in arraylist
		searchMap(testMap);		// searches users in hashmap


		// REMOVE
		System.out.println("REMOVE: ");
		remList(testList);		// removes users from arraylist
		remMap(testMap);		// removes users from hashmap

		// CONCLUSION
		System.out.println();
		System.out.println("In conclusion, the best data structure for user's ID and password is HashMap");
	}

	// Methods for storing ID & Pass
	// IDs are randomly generated by adding a random char to a string
	// 	every iteration and splitting when too long
	// Used this structure to generate random strings and avoid a nested loop

	//  store in an inputed ArrayList
	public static void storeList(ArrayList<User> al) {
		start = System.currentTimeMillis();
		for (int i = 0; i < howMany; i++) {
			newPass = rand.nextInt(100000, 999999);		// generate random pass

			// store id from placeholder list & generated pass in user object and
			// 	store user object in arraylist
			User user = new User();
			user.setID(placeList[i]);
			user.setPass(newPass);
			al.add(user);
		}
		end = System.currentTimeMillis();
		System.out.println("Time to add users to ArrayList: " + (end - start) + " milliseconds");

	}

	// search an inputed arraylist pass
	public static void searchList(ArrayList<User> al) {
		start = System.currentTimeMillis();
		// loop for multiple searches
		for (int i = 0; i < searchNum; i++) {
			String findUser = placeList[i];
			// loop for iterating through arraylist
			for (int j = 0; j < al.size() - 1; j++) {
				User temp = al.get(j);
				//System.out.println(temp.getID());
				if (temp.getID().equals(findUser)) {	// checks to see if al id matches the searched id
					break;		// stop loop
				}
			}
		}
		end = System.currentTimeMillis();
		System.out.println("Time to search users in ArrayList: " + (end - start) + " milliseconds");
	}

	// remove values from arraylist
	public static void remList(ArrayList<User> al) {
		start = System.currentTimeMillis();
		for (int i = 0; i < remNum; i++) {
			int delIndex = rand.nextInt(al.size() - 1);		// random index based on list size
			al.remove(delIndex);
		}
		end = System.currentTimeMillis();
		System.out.println("Time to remove users from ArrayList: " + (end - start) + " milliseconds");
	}


	// stores ID from placeholder list &  generated Pass in inputed hashmap
	public static void storeMap(HashMap<String, Integer> hm) {
		start = System.currentTimeMillis();
		for (int i = 0; i < howMany; i++) {
			newPass = rand.nextInt(100000, 999999);		// generate random pass
			hm.put(placeList[i], newPass);

		}
		end = System.currentTimeMillis();
		System.out.println("Time to add users to HashMap: " + (end - start) + " milliseconds");
	}

	// search for an inputed hashmap pass
	public static void searchMap(HashMap<String, Integer> hm) {
		start = System.currentTimeMillis();
		for (int i = 0; i < searchNum; i++) {
			hm.get(placeList[i]);
		}
		end = System.currentTimeMillis();
		System.out.println("Time to search users in HashMap: " + (end - start) + " milliseconds");
	}

	// remove values from hashmap
	public static void remMap (HashMap<String, Integer> hm) {
		start = System.currentTimeMillis();
		for (int i = 0; i < remNum; i++) {
			int delIndex = rand.nextInt(hm.size() - 1);		// random index based on map size
			hm.remove(delIndex);
		}
		end = System.currentTimeMillis();
		System.out.println("Time to remove users from HashMap: " + (end - start) + " milliseconds");
	}

	// generates a unique ID & Pass
	public static void generateIP () {
		for (int i = 0; i < howMany; i++) {
			if (newID.length() >= 16) {		// if ID gets too long split it
				int split = rand.nextInt(2,4);		// random int for deciding where to split string
				newID = newID.substring(newID.length()/split);		// new string generated from random old one
				newID+= rand.nextChar();
			} else {
				newID+= rand.nextChar();		// generates random char to add to new ID
			}
			placeList[i] = newID;
		}
	}




}
